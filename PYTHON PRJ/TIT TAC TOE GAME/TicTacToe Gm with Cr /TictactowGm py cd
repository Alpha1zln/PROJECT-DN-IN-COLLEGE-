#  Py code - " Tic Tac Tow Gm with Cr "



#  Add Algo, so that computer make smart moves
#   AI would be better is possible.


from tkinter import *
import random

def next_turn(row, column):
    global player, moves

    if buttons[row][column]['text'] == "" and check_winner() is False:

        buttons[row][column]['text'] = player
        moves += 1

        if check_winner() is False:
            player = players[1] if player == players[0] else players[0]
            label.config(text=player + " turn")
        elif check_winner() is True:
            label.config(text=player + " wins")
        elif check_winner() == "Tie":
            label.config(text="Tie!")

        # If there are remaining moves, let the computer make a move
        if moves < 9 and player == players[1]:
            computer_move()

# def check_winner():
#     # ... (unchanged)


def check_winner():

    for row in range(3):
        if buttons[row][0]['text'] == buttons[row][1]['text'] == buttons[row][2]['text'] != "":
            buttons[row][0].config(bg="green")
            buttons[row][1].config(bg="green")
            buttons[row][2].config(bg="green")
            return True

    for column in range(3):
        if buttons[0][column]['text'] == buttons[1][column]['text'] == buttons[2][column]['text'] != "":
            buttons[0][column].config(bg="green")
            buttons[1][column].config(bg="green")
            buttons[2][column].config(bg="green")
            return True

    if buttons[0][0]['text'] == buttons[1][1]['text'] == buttons[2][2]['text'] != "":
        buttons[0][0].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][2].config(bg="green")
        return True

    elif buttons[0][2]['text'] == buttons[1][1]['text'] == buttons[2][0]['text'] != "":
        buttons[0][2].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][0].config(bg="green")
        return True

    elif empty_spaces() is False:

        for row in range(3):
            for column in range(3):
                buttons[row][column].config(bg="yellow")
        return "Tie"

    else:
        return False




# def empty_spaces():
#     # ... (unchanged)

def empty_spaces():

    spaces = 9

    for row in range(3):
        for column in range(3):
            if buttons[row][column]['text'] != "":
                spaces -= 1

    if spaces == 0:
        return False
    else:
        return True



def new_game():
    global player, moves

    player = random.choice(players)
    moves = 0

    label.config(text=player + " turn")

    for row in range(3):
        for column in range(3):
            buttons[row][column].config(text="", bg="#F0F0F0")

    # If the computer starts, make its first move
    if player == "C":
        computer_move()



def computer_move():
    global moves

    while True:
        row = random.randint(0, 2)
        column = random.randint(0, 2)
        if buttons[row][column]['text'] == "":
            next_turn(row, column)
            break

window = Tk()
window.title("Tic-Tac-Toe")
players = ["U", "C"]
player = random.choice(players)
moves = 0

buttons = [[0, 0, 0],
           [0, 0, 0],
           [0, 0, 0]]

label = Label(text=player + " turn", font=('consolas', 40))
label.pack(side="top")

reset_button = Button(text="restart", font=('consolas', 20), command=new_game)
reset_button.pack(side="top")

frame = Frame(window)
frame.pack()

for row in range(3):
    for column in range(3):
        buttons[row][column] = Button(frame, text="", font=('consolas', 40), width=5, height=2,
                                      command=lambda row=row, column=column: next_turn(row, column))
        buttons[row][column].grid(row=row, column=column)

window.mainloop()

# Let the computer make the first move if it starts
if player == "C":
    computer_move()
